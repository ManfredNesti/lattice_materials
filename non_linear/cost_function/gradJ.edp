// ***************************************************************************
// Gradient of the functional (lagrangian approach)
// ***************************************************************************
func real[int] gradJ(real[int] & v)
{
  Xhp w;
  w[] = v;
  J(w[]);
  
  real [int] dJ(Xhp.ndof);
	real Curly = (nu12 - nutarget) / d1 ;
  cout << "*********************************************" << endl;
  cout << "DUAL PROBLEM ..." << endl;
  include "cost_function/dual.edp";
	dual;

  real dfilter;
  if(sigIN){
    dfilter = (1-xlb)/(tanh(beta * eta) + tanh(beta * (1 - xlb -eta))) *
                   beta / (cosh(beta*(w - xlb -eta)))^2;
  }
  else dfilter = 1.;

  varf gradient(SS, psi) =
      int2d(Th) (q*w^(q-1) * dfilter * psi *
                                     L*detF(u1,u2)*(detF(u1,u2)-1.) * (invC11(u1,u2) * gradE11(u1,u2,l1,l2)
          			                                                     + invC12(u1,u2) * gradE12(u1,u2,l1,l2)
          			          																					 + invC21(u1,u2) * gradE21(u1,u2,l1,l2)
          			          																					 + invC22(u1,u2) * gradE22(u1,u2,l1,l2))

       				 + q*w^(q-1)* dfilter * psi *
                                2.0 * M * (E11(u1,u2) * gradE11(u1,u2,l1,l2)
        			                           + E12(u1,u2) * gradE12(u1,u2,l1,l2)
        			    				               + E21(u1,u2) * gradE21(u1,u2,l1,l2)
        			                           + E22(u1,u2) * gradE22(u1,u2,l1,l2)))
      ;

  dJ = gradient(0, Xhp);
  cout << "jj = " << jj << endl;
  cout << "DUAL PROBLEM: done!" << endl;
  cout << "*********************************************" << endl;
  jj += 1;

  return dJ;
}
