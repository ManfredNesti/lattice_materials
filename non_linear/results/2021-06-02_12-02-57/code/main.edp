// ***************************************************************************
// Main
// ***************************************************************************
load "ff-Ipopt";
load "ffrandom";
load "iovtk";

include "macros.edp"
include "params.edp";
include "constraints.edp";
include "cost_function/J.edp";
include "cost_function/gradJ.edp";
include "adaptmesh/makemetrica.edp";

savemesh (Th, "results/mesh_initial.msh" );
int ii = 0;
while(stopmesh > tolmesh && ii < maxit){
	jj = 0;

	// Power penalty law
	if(pen) q = qmax - 2 * exp(- ii / 2.);
	else q = qmax;

	IPOPT(J, gradJ, ipC, ipGradC, v[],
	  lb  = xlb[], ub  = xub[],
	 	  clb = clb  , cub = cub  ,
	  checkindex = 1, structjacc = [gvi,gvj],
	    maxiter = IPOPTmaxiter + 100 * (ii == 0), warmstart = ii,
	  lm = lm, uz = uz[], lz = lz[], tol=  IPOPTtol
	  );

	// Helmholtz filter
	if(helm && ii != maxit - 1){
		solve helmholtz(vHelm, psi) = int2d(Th)(radius * (dx(vHelm) * dx(psi) + dy(vHelm) * dy(psi)))
		                              + int2d(Th)(vHelm * psi)
		                              - int2d(Th)(v * psi);
		plot(v,  wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_preHelm.ps", cmm = "Density preHelm"+ii);
		plot(vHelm, wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_postHelm.ps", cmm = "Density postHelm"+ii);
		v = vHelm;
	}

	// Mesh filter
	if(meshad && (ii == 4 || ii == 5)){
	  maxsK = 1;
	  ntold = Th.nt;
	  makemetrica(tau);
		Th = adaptmesh(Th, metric = [m11[],m12[],m22[]], nbvx = 12000, periodic=[[2,y],[4,y],[1,x],[3,x]]);
		savemesh (Th, "results/meshii"+ii+".msh" );
		plot(Th, wait = 0, cmm="New mesh");
		cout << "maxsK = " << maxsK << endl;
	}

	// Heaviside filter
	if(heav && ii != maxit - 1){
    plot(v,  wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_preHeav.ps", cmm = "Density preHeav"+ii);
		real betaH = 10*(ii < 19) + 7*(ii == 19);
		vHeav = 0.5 + tanh(betaH*(v-0.5))/(2*tanh(0.5*betaH));
    plot(vHeav, wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_postHeav.ps", cmm = "Density postHeav"+ii);
    v = vHeav;
	}

	// Sigmund filter
	if(sig && ii != maxit - 1){
			plot(v,  wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_preSig.ps", cmm = "Density preSig"+ii);
			vSig = (1-xlb) * (tanh(beta * eta) + tanh(beta * (v - xlb - eta)))
		                 / (tanh(beta * eta) + tanh(beta * (1 - xlb - eta))) + xlb;
			plot(vSig, wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density_postSig.ps", cmm = "Density postSig"+ii);
			v = vSig;
			beta += 1;
			eta += 0.02;
	}

  // Mesh projection
  if(meshad && (ii == 4 || ii == 5)){
  	v = v;
  	xlb = xlb;
  	xub = xub;
  	gvi = gvi;
  	gvj = 0:Xhp.ndof-1;
  	lz = lz;
  	uz = uz;
  	m11 = m11;
  	m12 = m12;
  	m22 = m22;

  	stopmesh = abs(Th.nt - real(ntold))/ntold;
  }

	ii += 1;

	cout << "Iteration " << ii << ", Mesh error = " << stopmesh << endl;

	{ofstream fout("results/"+ii+"_density.txt");	fout << v[];}

	plot(v,  wait = 0, fill = 1, value = 1, ps = "results/"+ii+"_density.ps", cmm = "Density "+ii);
	savevtk("results/"+ii+"_density.vtk", Th, v, dataname="Density", order=ffordervel);
}

cout << Th.nt << endl;

plot(v,  wait = 0, fill = 1, value = 1, ps = "results/final_density.ps", cmm = "Final Density");
