// ***************************************************************************
// Print params
// ***************************************************************************
cout << endl << endl;

cout << "*********************************************" << endl;
cout << "case1_non_linear.edp - Params" << endl;
cout << "*********************************************" << endl;
cout << "Loaded: " << ld << endl;
if(ld) {
  cout << "Loaded path: " << path << endl;
  cout << "Loaded idx: " << idxld << endl;
} else {
  cout << "Mesh size: " << n << " x " << n << endl;
}
cout << "nu: " << nu << endl;
cout << "lambda: " << L << endl;
cout << "mu: " << M <<  endl;
cout << "Young modulus: " << E << endl;

cout << "-----" << endl;

cout << "Given horizontal traction on R: " << d1 <<  endl;
cout << "nu target: " << nutarget <<  endl;
cout << "Volume fraction: " << vf <<  endl;

cout << "-----" << endl;

cout << "Initial density: ";
if (rnd) cout << "random with seed = " << seed << endl;
else cout << "hard-coded" << endl;

cout << "-----" << endl;

cout << "IPOPT max iterations: " << IPOPTmaxiter <<  endl;

cout << "-----" << endl;

cout << "Power law: " << pen <<  endl;
cout << "q: " << q << endl;
cout << "qmax: " << qmax << endl;

cout << "-----" << endl;

cout << "Helmholtz filtering: " << helm <<  endl;
if(helm) cout << "Helmholtz radius: " << radius <<  endl;

cout << "-----" << endl;

cout << "Heaviside filtering: " << heav <<  endl;

cout << "-----" << endl;

cout << "Mesh adaptivity: " << meshad <<  endl;
if(meshad){
  cout << "Mesh tolerance: " << tolmesh <<  endl;
  cout << "tau: " << tau <<  endl;
}

cout << "-----" << endl;

cout << "Sigmund filtering: " << sig <<  endl;
cout << "beta start: " << beta0 << endl;
cout << "eta start: " << eta0 << endl;
cout << "beta increment: " << betaincr << endl;
cout << "eta increment: " << etaincr << endl;

cout << "-----" << endl;

cout << "Main cycle max iterations: " << maxit << endl;

cout << endl << endl;

cout << "*********************************************" << endl;
cout << "case1_non_linear.edp - Solution" << endl;
cout << "*********************************************" << endl;
