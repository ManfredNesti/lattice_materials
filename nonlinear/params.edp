// ***************************************************************************
// Params
// ***************************************************************************
int[int] ffordervel = [1]; // to save images in .vtk format

// Load and mesh
int ld = 0;        // 1: to load a previously computed density, 0: otherwise
string path = "";  // path of the previously computed density
int idxld = 0;     // ii index of the previously computed density
mesh Th;
int n = 30;        // square mesh subdivisions

if(ld) { // load a mesh
  Th = readmesh(path + idxld + "_mesh.txt");
  plot(Th, wait = 0, cmm = "Loaded mesh");
} else { // create a new mesh
  Th = square(n, n, [x, y]);
}

// Params
real nu12;                        // estimated nu
real nu = 0.3;                    // nu of the material
real E = 1.;                      // Young's modulus of the material
real L = E * nu / (1 - nu ^ 2);   // lambda Lamé coefficient of the material
real M = E / (2 * (1 + nu));      // mu Lamé coefficient of the material
real d1 = 0.3;                    // u traction given
real vf = 0.4;                    // allowable volume fraction
real nutarget = -1.0;             // nu target

// Density space
fespace Xhp(Th,P1);
// fespace Xhp(Th, P1, periodic = [[2,y],[4,y],[1,x],[3,x]]);
Xhp v,              // density
    vHelm,          // Helmholtz filtered density
    vHeav,          // Heaviside filtered density
    vSig,           // Sigmund tanh filtered density
    psi,
    lz,
    uz;            // density, filtered density, test density, params for IPOPT
Xhp m11, m12, m22; // metric computation utilitiesyou

// Displacement space
fespace Vh(Th, [P1, P1]);
Vh [u1,u2],                  // displacement
   [u10,u20] = [d1*x,0],     // old displacement (for Newton)
   [psi1,psi2],              // test displacement
   [varu1,varu2],            // displacement increments (for Newton)
   [err1,err2],              // errors (for Newton)
   [l1, l2],                 // lambda
   [phi1, phi2];             // test lambda

// Area space
fespace Xh0(Th, P0); // periodic = [[2,y],[4,y],[1,x],[3,x]]);
Xh0 vol = area;
real Volume = int2d(Th)(1.);

// IPOPT params
real [int] lm(1);
int IPOPTmaxiter = 50;                            // maximum number of iterations
int[int] gvi(Xhp.ndof), gvj = 0:Xhp.ndof-1;
gvi = 0;
Xhp xlb = 1e-4, xub = 1;                          // lower and upper bounds for v density
real tolv = 0.;
real[int] clb = [0*vf*Volume], cub = [vf*Volume]; // lower and upper bounds for constraint
real IPOPTtol = 1e-3;                             // desired tollerance

// Inital density
int rnd = 0;    // {0: hard-coded, 1: random} initial density
int seed = 10;  // seed for random initial density
if (ld) {
  ifstream fu(path + idxld + "_density.txt");
  fu >> v[];
  plot(v, fill = 1, value = 1, cmm = "Loaded density", ps = "results/loaded_density.ps", wait = 0);
} else if (rnd) { // random initial density
  srandom(seed);
  for(int ii = 0; ii < Xhp.ndof; ii++) v[][ii] = random() / 3e9;
  plot(v, fill = 1, value = 1, cmm = "Initial density", ps = "results/loaded_density.ps", wait = 0);
} else { // hard-coded initial density
  // v = 0.5;
  // v = (x <= 0.5) * (y >= 0.5) * (y <= 0.7);
  // v = 5 * abs((x-0.5)^2 + (y-0.5)^2 + 0.^8);
  // v = (1 - xlb) * 0.5 * abs(sin(2 * pi * (x - 0.5)) * sin(2 * pi * (y - 0.5))) + xlb;
  // v = (1 - xlb) * abs(sin(0.5 * pi * x) * sin(1 * pi * y)) + xlb;
  v = (1 - xlb) * cos(pi * (x - 0.5)) * cos(pi * (y - 0.5)) + xlb;
  plot(v, fill = 1, value = 1, cmm = "Initial density", ps = "results/initial_density.ps", wait = 0);
}

// Power penalty law
int pen = 0;            // 1: for to use the power penaly law, 0: otherwise
real q = 3.;            // startin q exponent
real qmax = 3.;         // maximum value for q exponent in the main cycle

// Helmholtz filter
int helm = 0;           // 1: for to use Helmholtz filter, 0: otherwise
real radius = 1./80^2;  // filtering radius

// Heaviside filter
int heav = 0;           // 1: for to use Heaviside filter, 0: otherwise

// Main params
int maxit = 6;          // maximum number of iteration of the main cycle

// Hyperbolic tangent
// filter of Sigmund
int sig = 1;            // 1: for to use the Sigmund filter, 0: otherwise
real beta0 = 3.5;       // starting beta coefficient
real eta0 = 0.45;       // starting eta coefficient
real betaincr = 1;      // beta increment at each main cycle iteration
real etaincr = 0.02;    // eta increment at each main cycle iteration

// Mesh adaptivity
int meshad = 1;         // 1: for to use mesh adaptivity, 0: otherwise
real tolmesh = 0.0001;  // desired mesh tollerance
real stopmesh = tolmesh + 1.;
real tau = .00001;
real maxsK;
int ntold = Th.nt;

include "print_params.edp";
