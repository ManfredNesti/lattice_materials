-- FreeFem++ v  3.610001 (date Mon Mar 23 07:06:46 UTC 2020)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : load "ff-Ipopt";
    2 : load "ffrandom";
    3 : load "iovtk" load: iovtk 
;
    4 : 
    5 : int ii = 0;
    6 : int jj = 0;
    7 : 
   
   21 : while(stopmesh > tolmesh && ii < maxit){
   22 : 
   23 : 	jj = 0;
   24 : 
   25 : 	// Power penalty law
   26 : 	if(pen) q = qmax - 2 * exp(- ii / 2.); //q = 3/maxit * ii + 1;
   27 : 	else q = qmax;
   28 : 
   29 : 
   30 : 	IPOPT(J, gradJ, ipC, ipGradC, v[],
   31 : 	  lb  = xlb[], ub  = xub[],
   32 :    	  clb = clb  , cub = cub  ,
   33 : 	  checkindex = 1, structjacc = [gvi,gvj],
   34 :       maxiter = IPOPTmaxiter + 100*(ii==0), warmstart = ii,
   35 : 	  lm = lm, uz = uz[], lz = lz[], tol=  IPOPTtol
   36 : 	  //printlevel = 1,
   37 : 	  //derivativetest="first-order");
   38 :       //,maxiter=10);
   39 : 	  );
   40 : 
   41 : 		// Helmholtz filtering
   42 : 		if(helm){
   43 : 			helmholtz;
   44 : 			plot(v,  wait = 1, fill = 1, cmm = "Density per-Helmholtz");
   45 : 			plot(vHelm, wait = 1, fill = 1, cmm = "Density post-Helmholtz");
   46 : 			v = vHelm;
   47 : 		}
   48 : 
   49 : 	// Mesh adaptivity
   50 :   if(meshad){
   51 :     maxsK = 1;
   52 :     ntold = Th.nt;
   53 :     makemetrica(tau);
   54 :   	Th = adaptmesh(Th, metric = [m11[],m12[],m22[]], nbvx = 12000, periodic=[[2,y],[4,y],[1,x],[3,x]]);
   55 :   	plot(Th, wait = 1, cmm="New mesh");
   56 :   	cout << "maxsK = " << maxsK << endl;
   57 :   }
   58 : 
   59 : 	// Heaviside filtering
   60 : 	if(heav){
   61 :     plot(v,  wait = 1, fill = 1, cmm = "Density per-Heaviside");
   62 : 		real betaH = 10*(ii < 19) + 7*(ii == 19);
   63 : 		vHeav = 0.5 + tanh(betaH*(v-0.5))/(2*tanh(0.5*betaH));
   64 :     plot(vHeav, wait = 1, fill = 1, cmm = "Density post-Heaviside");
   65 :     v = vHeav;
   66 : 	}
   67 : 
   68 : 	// Sigmund filtering
   69 : 	if(sig){
   70 : 		if(ii != maxit - 1 ){
   71 : 			// beta = 2. * beta; //se vogliamo raddoppiare beta ad ogni iterazione ii
   72 : 			// beta = betamax - (betamax - betamin) * exp(- ii / 2); //se vogliamo incrementare più "soft"
   73 : 			// eta = (ii <= 2)*0.4 + (ii > 2 && ii <= 4)*0.5 + (ii > 4)*0.55;
   74 : 			plot(v,  wait = 1, fill = 1, cmm = "Density pre-Sigmund");
   75 : 			vSig = (1-xlb) * (tanh(beta * eta) + tanh(beta * (v - xlb - eta)))
   76 : 		                 / (tanh(beta * eta) + tanh(beta * (1 - xlb - eta))) + xlb;
   77 : 			plot(vSig, wait = 1, fill = 1, cmm = "Density post-Sigmund");
   78 : 			v = vSig;
   79 : 			if(beta <= 6) beta += 1;
   80 : 			//eta += 0.02;
   81 : 		}
   82 : 	}
   83 : 
   84 :   // Mesh projection (only for mesh adaptivity)
   85 :   if(meshad){
   86 :   	v = v;
   87 :   	xlb = xlb;
   88 :   	xub = xub;
   89 :   	gvi = gvi;
   90 :   	gvj = 0:Xhp.ndof-1;
   91 :   	lz = lz;
   92 :   	uz = uz;
   93 :   	m11 = m11;
   94 :   	m12 = m12;
   95 :   	m22 = m22;
   96 : 
   97 :   	stopmesh = abs(Th.nt - real(ntold))/ntold;
   98 :   }
   99 : 
  100 : 	ii += 1;
  101 : 
  102 : 	cout << "Iteration " << ii << ", Mesh error = " << stopmesh << endl;
  103 : 	savemesh (Th, "results/mesh_"+(ii-1)+".msh" );
  104 : 	plot(v,  wait = 1, fill = 1, ps = "results/density_"+(ii-1)+".ps", cmm = "Density "+(ii-1));
  105 : 	savevtk("results/iter"+(ii-1)+".vtk", Th, v, dataname="Density", order=ffordervel);
  106 : 
  107 : 	outnu << nu12 << endl;
  108 : }
  109 : 
  110 : cout << Th.nt << endl;
  111 : 
  112 : plot(v,  wait = 1, fill = 1, cmm = "Final density");
  113 : 
  114 : include "checknu.edp"//Construct a 2x2 material
    2 : //compute nu on the structure obtained
    3 : 
    4 : //cell mesh Th
    5 : //cell density v
    6 : plot(v,  wait = 1, fill = 1, cmm = "Final density in 1 cell");
    7 : 
    8 : int firstTry = 0;
    9 : if (firstTry)
   10 : {
   11 :   mesh Th2 = movemesh(Th,[-x, y]); // top left
   12 :   fespace Vh2(Th2,P1);
   13 :   Vh2 v2;
   14 :   v2[] = v[];
   15 :   Th = Th + Th2;                  // top left-right
   16 :   v = v + v2 - v*v2;
   17 :   plot(Th,v,fill=1,wait=1,cmm="u1+u2");
   18 :   mesh Th3 = movemesh(Th,[ x,-y]); // bottom left-right
   19 :   fespace Vh3(Th3,P1);
   20 :   Vh3 v3;
   21 :   v3[] = v[];
   22 :   plot(Th3,v3,fill=1,wait=1,cmm="u3+u4");
   23 :   Th = Th+Th3;        // 4x4 super-grid
   24 :   v = v*(y>=0) + v3*(y<0);
   25 :   plot(Th,v,fill=1,cmm="Final density in 2x2 material cells");
   26 : }
   27 : else
   28 : {
   29 :   mesh Th2 = square(2*n , 2*n , [2*x-1, 2*y-1]); // [-1,1]^2 //HOW TO CHOOSE FROM WHAT Th2 START?
   30 :   fespace Vh2(Th2, P1);
   31 :   Vh2 v2; // densità su Th2
   32 :   for(int i = 0; i < Th2.nt; i++)
   33 :     for(int j = 0; j < 3; j++)
   34 :       if      (Th2[i][j].x >= 0 & Th2[i][j].y >= 0) v2[][Vh2(i,j)] = v( Th2[i][j].x, Th2[i][j].y);
   35 :       else if (Th2[i][j].x <  0 & Th2[i][j].y >= 0) v2[][Vh2(i,j)] = v(-Th2[i][j].x, Th2[i][j].y);
   36 :       else if (Th2[i][j].x <  0 & Th2[i][j].y <  0) v2[][Vh2(i,j)] = v(-Th2[i][j].x,-Th2[i][j].y);
   37 :       else                                          v2[][Vh2(i,j)] = v( Th2[i][j].x,-Th2[i][j].y);
   38 :   plot(v2, fill = 1,  wait = 1);
   39 :   // traslo nel primo quadrante: così Th2 da [-1,1]^2 diventa la nuova "unit cell" [0,2]^2
   40 :   Vh2 u2x =1, u2y = 1;
   41 :   real [int] v2old = v2[];
   42 :   Th2 = movemesh(Th2,[x+u2x,y+u2y]);
   43 :   v2 = v2;
   44 :   v2[] = v2old;
   45 :   plot(v2, fill = 1,cmm = "v2 dopo shift",  wait = 1);
   46 : }
   47 : //Compute nu Poisson coefficient to check our results
   48 : //Solve primal problem: with v2, on Th2?
   49 : problem primallinearized([varu1,varu2], [psi1, psi2]) =
   50 :   int2d(Th2) The Identifier Th2 does not exist 

 Error line number 50, in file checknu.edp, before  token )

  current line = 50
Compile error : 
	line number :50, )
error Compile error : 
	line number :50, )
 code = 1 mpirank: 0
