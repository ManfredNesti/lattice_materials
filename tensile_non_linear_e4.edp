//tensile test with our model for non linear regime in 2d
ofstream out("tensile_non_linear2.csv", append); //file per output

// Macro
//Gradient of a vector field (u1, u2)
macro grad11(u1, u2) (dx(u1)) //
macro grad12(u1, u2) (dy(u1)) //
macro grad21(u1, u2) (dx(u2)) //
macro grad22(u1, u2) (dy(u2)) //

//Deformation gradient F
macro F11(u1,u2) (1.0 + grad11(u1,u2)) //
macro F12(u1,u2) (0.0 + grad12(u1,u2)) //
macro F21(u1,u2) (0.0 + grad21(u1,u2)) //
macro F22(u1,u2) (1.0 + grad22(u1,u2)) //
// Components Green-Lagrange strain tensor E
macro E11 (u1,u2) 0.5*(grad11(u1,u2)*grad11(u1,u2) + 2.*grad11(u1,u2) + grad21(u1,u2)*grad21(u1,u2)) //
macro E12 (u1,u2) 0.5*(grad11(u1,u2)*grad12(u1,u2) + grad21(u1,u2)*grad22(u1,u2) + grad12(u1,u2) + grad21(u1,u2) - 1.) //
macro E21 (u1,u2) 0.5*(grad11(u1,u2)*grad12(u1,u2) + grad21(u1,u2)*grad22(u1,u2) + grad12(u1,u2) + grad21(u1,u2) - 1.) //
macro E22 (u1,u2) 0.5*(grad12(u1,u2)*grad12(u1,u2) + 2.*grad22(u1,u2) + grad22(u1,u2)*grad22(u1,u2)) //

macro traceE(u1,u2)	(E11(u1,u2) + E22(u1, u2)) // Trace of Green-Lagrange tensor
macro detF(u1,u2) (F11(u1,u2) * F22(u1,u2) - F12(u1,u2) * F21(u1,u2) ) //
//macro detF(u1,u2) (1 + grad11(u1,u2 + grad22(u1,u2) + grad11(u1,u2*grad22(u1,u2) - grad12(u1,u2*grad21(u1,u2)) //J determinant of F

//Right Cauchy-Green deformation tensor C
macro C11(u1,u2) ((grad11(u1,u2)+1.0)^2+grad21(u1,u2)^2 ) //
macro C12(u1,u2) ((grad11(u1,u2)+1.0)*grad12(u1,u2) + grad21(u1,u2)*(grad22(u1,u2) + 1.0)) //
macro C21(u1,u2) ((grad11(u1,u2)+1.0)*grad12(u1,u2) + grad21(u1,u2)*(grad22(u1,u2) + 1.0)) //
macro C22(u1,u2) ((grad22(u1,u2)+1.0)^2+grad12(u1,u2)^2 ) //

macro detC(u1,u2) (C11(u1,u2) * C22(u1,u2) - C12(u1,u2) * C21(u1,u2)) // determinantof C

//Inverse of C: C^-1 (symmetric)
macro invC11(u1,u2) (1/detC(u1,u2) * (2*E22(u1,u2)+1)) //
macro invC12(u1,u2) (1/detC(u1,u2) * (-2*E12(u1,u2))) //
macro invC21(u1,u2) (1/detC(u1,u2) * (-2*E21(u1,u2))) //
macro invC22(u1,u2) (1/detC(u1,u2) * (2*E11(u1,u2)+1)) //

// Second Piola-Kirchhoff stress tensor for Phi4 Sij forse non serve ...

// Dijkl = - d(Cij^-1)/dEkl !!! verificata abbastanza ... anche il meno
macro D1111(u1,u2) (invC11(u1,u2)*invC11(u1,u2) * 2 ) //
macro D1211(u1,u2) (invC11(u1,u2)*invC21(u1,u2) * 2 ) // = D1121, D1112, D2111 for symmetry of C,invC and E
macro D1121(u1,u2) (invC11(u1,u2)*invC12(u1,u2) * 2 ) //
macro D1112(u1,u2) (invC11(u1,u2)*invC12(u1,u2) * 2 ) //
macro D2111(u1,u2) (invC11(u1,u2)*invC21(u1,u2) * 2 ) //
macro D1122(u1,u2) (invC12(u1,u2)*invC12(u1,u2) * 2 ) // = D2211
macro D2211(u1,u2) (invC21(u1,u2)*invC21(u1,u2) * 2 ) //
macro D1212(u1,u2) (invC11(u1,u2)*invC22(u1,u2) + invC12(u1,u2)*invC21(u1,u2)) // = D2121, D1221, D2112
macro D2121(u1,u2) (invC11(u1,u2)*invC22(u1,u2) + invC12(u1,u2)*invC21(u1,u2)) //
macro D1221(u1,u2) (invC11(u1,u2)*invC22(u1,u2) + invC12(u1,u2)*invC21(u1,u2)) //
macro D2112(u1,u2) (invC11(u1,u2)*invC22(u1,u2) + invC12(u1,u2)*invC21(u1,u2)) //
macro D2122(u1,u2) (invC22(u1,u2)*invC12(u1,u2) * 2 ) // = D2212, D2221, D1222
macro D2212(u1,u2) (invC22(u1,u2)*invC21(u1,u2) * 2 ) //
macro D2221(u1,u2) (invC22(u1,u2)*invC21(u1,u2) * 2 ) //
macro D1222(u1,u2) (invC22(u1,u2)*invC12(u1,u2) * 2 ) //
macro D2222(u1,u2) (invC22(u1,u2)*invC22(u1,u2) * 2 ) //

//dEij(u1,u2)/du * lambda (l'ho corretto: CI ERAVAMO PERSI UN *0.5 PER STRADA?)
macro gradE11 (u1,u2,l1,l2) (grad11(u1,u2)*grad11(l1,l2) + grad21(u1,u2)*grad21(l1,l2) + grad11(l1,l2)) //
macro gradE12 (u1,u2,l1,l2) (0.5*(grad11(u1,u2)*grad12(l1,l2) + grad21(u1,u2)*grad22(l1,l2) + grad12(u1,u2)*grad11(l1,l2) + grad22(u1,u2)*grad21(l1,l2) + grad12(l1,l2) + grad21(l1,l2)) )// vanno aggiunti dopo come termine noto
macro gradE21 (u1,u2,l1,l2) (0.5*(grad11(u1,u2)*grad12(l1,l2) + grad21(u1,u2)*grad22(l1,l2) + grad12(u1,u2)*grad11(l1,l2) + grad22(u1,u2)*grad21(l1,l2) + grad12(l1,l2) + grad21(l1,l2)) )  // vanno aggiunti dopo come termine noto
macro gradE22 (u1,u2,l1,l2) (grad12(u1,u2)*grad12(l1,l2) + grad22(u1,u2)*grad22(l1,l2) + grad22(l1,l2)) //

//d^2 Eij(u1,u2)/du^2*lambda * [phi1,phi2] (this is the test function)
macro grad2E11 (phi1,phi2,l1,l2) (grad11(phi1,phi2)*grad11(l1,l2) + grad21(phi1,phi2)*grad21(l1,l2)) //
macro grad2E12 (phi1,phi2,l1,l2) (0.5*(grad11(phi1,phi2)*grad12(l1,l2) + grad21(phi1,phi2)*grad22(l1,l2) + grad12(phi1,phi2)*grad11(l1,l2) + grad22(phi1,phi2)*grad21(l1,l2))) //
macro grad2E21 (phi1,phi2,l1,l2) (0.5*(grad11(phi1,phi2)*grad12(l1,l2) + grad21(phi1,phi2)*grad22(l1,l2) + grad12(phi1,phi2)*grad11(l1,l2) + grad22(phi1,phi2)*grad21(l1,l2))) //
macro grad2E22 (phi1,phi2,l1,l2) (grad12(phi1,phi2)*grad12(l1,l2) + grad22(phi1,phi2)*grad22(l1,l2)) //

// Parameters
real q = 4.; //power for pensalty method

real vold;
real Pa = 0; //no forces

real nu = 0.3;
real E = 1.;
real L = E*nu/(1-nu^2); //E*nu/(1+nu)/(1-2*nu); HO TENUTO QUELLO SBAGLIATO
real M = E/(2*(1+nu));
// real mu = 0.012e5; //kg/cm^2
// real lambda = 0.4e5; //kg/cm^2
real coef = 0.1;
real  u = 1.,  v = -0.1; //traction bc
// Mesh & Fespace

mesh   Th = square(20,20);
//density space
fespace Xh(Th,P1);
fespace Xhp(Th, P1, periodic = [[2,y],[4,y],[1,x],[3,x]]);
Xhp rho;
rho = 1;

//displacement space
fespace Vh(Th, [P1, P1]);
Vh [u1,u2], [u10,u20], [psi1,psi2], [varu1,varu2], [err1,err2];

// // Problem: try fix point method
// problem primallinearized([varu1,varu2], [psi1, psi2]) =
//   int2d(Th) (L*detF(u1,u2)*(detF(u1,u2)-1.0) * (C11(u1,u2) * gradE11(varu1,varu2,psi1,psi2)
//                                                + C12(u1,u2) * gradE12(varu1,varu2,psi1,psi2)
//                                                + C21(u1,u2) * gradE21(varu1,varu2,psi1,psi2)
//                                                + C22(u1,u2) * gradE22(varu1,varu2,psi1,psi2))
//              + 2.0 * M * (E11(u1,u2) * gradE11(varu1,varu2,psi1,psi2) + E12(u1,u2) * gradE12(varu1,varu2,psi1,psi2)
//                         + E21(u1,u2) * gradE21(varu1,varu2,psi1,psi2) + E22(u1,u2) * gradE22(varu1,varu2,psi1,psi2)))
//   + int2d(Th)(L*detF(u1,u2)*(detF(u1,u2)-1.0) * (C11(u1,u2) * grad11(psi1,psi2)
//                                                + C12(u1,u2) * 0.5 * (grad12(psi1,psi2) + grad21(psi1,psi2))
//                                                + C21(u1,u2) * 0.5 * (grad12(psi1,psi2) + grad21(psi1,psi2))
//                                                + C22(u1,u2) * grad22(psi1,psi2))
//            + 2.0 * M * (E11(u1,u2) * grad11(psi1,psi2) + E12(u1,u2) * 0.5 * (grad12(psi1,psi2) + grad21(psi1,psi2))
//                       + E21(u1,u2) * 0.5 * (grad12(psi1,psi2) + grad21(psi1,psi2) + E22(u1,u2) * grad22(ps1,psi2)))
//               )
//
//   + on(2,varu1=u) //dirichlet
//   + on(1,varu2=0) // symmetric bc
//   + on(4,varu1=0) // symmetric bc
//   ;

// // Problem: try Newton method
problem primallinearized([varu1,varu2], [psi1, psi2]) =
  int2d(Th) (L* (2.0*detF(u10,u20)-1.) * (dx(psi1)*F22(u10,u20) + dy(psi2)*F11(u10,u20) - dy(psi1)*F21(u10,u20) - dx(psi2)*F12(u10,u20))
                                       * (invC11(u10,u20) * gradE11(u10,u20,varu1,varu2) + invC12(u10,u20) * gradE12(u10,u20,varu1,varu2)
                                       + invC21(u10,u20) * gradE21(u10,u20,varu1,varu2) + invC22(u10,u20) * gradE22(u10,u20,varu1,varu2))
           + L* (detF(u10,u20)-1) * detF(u10,u20) * ( - D1111(u10,u20) * gradE11(u10,u20,psi1,psi2) * gradE11(u10,u20,varu1,varu2) //following 2nd hyp
                                                      - D1112(u10,u20) * gradE12(u10,u20,psi1,psi2) * gradE11(u10,u20,varu1,varu2)
                                                      - D1121(u10,u20) * gradE21(u10,u20,psi1,psi2) * gradE11(u10,u20,varu1,varu2)
                                                      - D1122(u10,u20) * gradE22(u10,u20,psi1,psi2) * gradE11(u10,u20,varu1,varu2)
                                                      - D1211(u10,u20) * gradE11(u10,u20,psi1,psi2) * gradE12(u10,u20,varu1,varu2)
                                                      - D1212(u10,u20) * gradE12(u10,u20,psi1,psi2) * gradE12(u10,u20,varu1,varu2)
                                                      - D1221(u10,u20) * gradE21(u10,u20,psi1,psi2) * gradE12(u10,u20,varu1,varu2)
                                                      - D1222(u10,u20) * gradE22(u10,u20,psi1,psi2) * gradE12(u10,u20,varu1,varu2)
                                                      - D2111(u10,u20) * gradE11(u10,u20,psi1,psi2) * gradE21(u10,u20,varu1,varu2)
                                                      - D2112(u10,u20) * gradE12(u10,u20,psi1,psi2) * gradE21(u10,u20,varu1,varu2)
                                                      - D2121(u10,u20) * gradE21(u10,u20,psi1,psi2) * gradE21(u10,u20,varu1,varu2)
                                                      - D2122(u10,u20) * gradE22(u10,u20,psi1,psi2) * gradE21(u10,u20,varu1,varu2)
                                                      - D2211(u10,u20) * gradE11(u10,u20,psi1,psi2) * gradE22(u10,u20,varu1,varu2)
                                                      - D2212(u10,u20) * gradE12(u10,u20,psi1,psi2) * gradE22(u10,u20,varu1,varu2)
                                                      - D2221(u10,u20) * gradE21(u10,u20,psi1,psi2) * gradE22(u10,u20,varu1,varu2)
                                                      - D2222(u10,u20) * gradE22(u10,u20,psi1,psi2) * gradE22(u10,u20,varu1,varu2))

          + 2.0*M* (gradE11(u10,u20,psi1,psi2) * gradE11(u10,u20,varu1,varu2) + E11(u10,u20) * grad2E11(psi1,psi2,varu1,varu2) +
                    gradE12(u10,u20,psi1,psi2) * gradE12(u10,u20,varu1,varu2) + E12(u10,u20) * grad2E12(psi1,psi2,varu1,varu2) +
                    gradE21(u10,u20,psi1,psi2) * gradE21(u10,u20,varu1,varu2) + E21(u10,u20) * grad2E21(psi1,psi2,varu1,varu2) +
                    gradE22(u10,u20,psi1,psi2) * gradE22(u10,u20,varu1,varu2) + E22(u10,u20) * grad2E22(psi1,psi2,varu1,varu2) )
            )

    - int2d(Th) (L*detF(u10,u20)*(detF(u10,u20)-1.) * (C11(u10,u20) * gradE11(u10,u20,psi1,psi2)
                                               + C12(u10,u20) * gradE12(u10,u20,psi1,psi2)
    																					 + C21(u10,u20) * gradE21(u10,u20,psi1,psi2)
    																					 + C22(u10,u20) * gradE22(u10,u20,psi1,psi2))
     				    + 2.0 * M * (E11(u10,u20) * gradE11(u10,u20,psi1,psi2) + E12(u10,u20) * gradE12(u10,u20,psi1,psi2)
    				               + E21(u10,u20) * gradE21(u10,u20,psi1,psi2) + E22(u10,u20) * gradE22(u10,u20,psi1,psi2)))
    + on(2,varu1=0) //dirichlet
    + on(1,varu2=0) // symmetric bc
    + on(4,varu1=0) // symmetric bc
  ;

//Initialization:
[u10, u20] = [u*(x>=1), 0]; //u_k old che soddisfa BC Dirichlet
[u1, u2] = [u10, u20]; // u_1
real tol = 1.e-2;
real res = 2. * tol;
int loopcount = 0;
int loopmax = 45;
real alpha = 0.5;

//for fix point method
// func real residualL2()
// {
//   // store increments in err variables
//   err1[] = varu1[];
//   err1[] -= u1[];
//
//   // compute increment norms
//   // for H1 norm: dx(err1)^2 + dy(err1)^2 + dx(err2)^2 + dy(err2)^2
//   real erru = int2d(Th)(err1^2 + err2^2);
//   real normu = int2d(Th)(u1^2 + u2^2);
//   // return error estimate (stopping criterion)
//   return sqrt(erru / (normu+1e-15));
// }

// for Newton method
func real errorL2()
{
  // store increments
  err1[] = u1[];
  err1[] -= u10[];

  real erru = int2d(Th)(err1^2 + err2^2);
  real normu = int2d(Th)(u10^2 + u20^2);
  // return error estimate (stopping criterion)
  return sqrt(erru / (normu+1e-15));

}

// Iterations : change between fixed point and Newton ->attenzione all'errore
while (loopcount <= loopmax && res >= tol){
    loopcount ++;
    cout << "Loop " << loopcount << endl;

    // Solve
    cout << " determinant C: " << int2d(Th) (detC(u1,u2)) << endl;
    primallinearized;
    // Update
    u1[] -= alpha * varu1[];// u_k+1 = u_k - delta_u (- perchè troviamo -deltau in realtà)
    // update err for the stopping criterion
    res = errorL2();

    cout << " L^2 residual = " << res << endl;
    //Update old solution
    u10[] = u1[];

    // Plot
    plot([u1,u2], cmm="displacement");
}

// Plot
plot([u1, u2], wait=true);
plot(u1,fill=1,dim=3,wait = 1, cmm="u1");
plot(u2,fill=1,dim=3,wait = 1, cmm="u2");

// Movemesh
real minarea = checkmovemesh(Th, [x+coef*u1, y+coef*u2]);
if (minarea > 0) { //movemesh will be ok
  mesh th1 = movemesh(Th, [x+coef*u1, y+coef*u2]);
  plot(th1, wait=true);
  plot(Th, th1, wait=true);
}

cout << " --- ERROR --- Min area = " << minarea << endl;

// Plot

//estimated nu
real d1 = int1d(Th,2)(u1) - int1d(Th,4)(u1);
real d2 = int1d(Th,3)(u2) - int1d(Th,1)(u2);;
cout << "d1 = " << d1 << endl;
cout << "d2 = " << d2 << endl;
real nu12 = -d2/d1;
cout << "estimated nu = " << nu12 << endl;

//output
out << nu12 << ",";
out << endl;
