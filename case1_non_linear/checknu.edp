//Construct a 2x2 material
//compute nu on the structure obtained

//cell mesh Th
//cell density v
plot(v,  wait = 1, fill = 1, cmm = "Final density in 1 cell");

int firstTry = 0;
mesh Th2 = square(2*n , 2*n , [2*x-1, 2*y-1]); // [-1,1]^2 //HOW TO CHOOSE FROM WHAT Th2 START?

if (firstTry)
{
  mesh Th2 = movemesh(Th,[-x, y]); // top left
  fespace Vh2(Th2,P1);
  Vh2 v2;
  v2[] = v[];
  Th = Th + Th2;                  // top left-right
  v = v + v2 - v*v2;
  plot(Th,v,fill=1,wait=1,cmm="u1+u2");
  mesh Th3 = movemesh(Th,[ x,-y]); // bottom left-right
  fespace Vh3(Th3,P1);
  Vh3 v3;
  v3[] = v[];
  plot(Th3,v3,fill=1,wait=1,cmm="u3+u4");
  Th = Th+Th3;        // 4x4 super-grid
  v = v*(y>=0) + v3*(y<0);
  plot(Th,v,fill=1,cmm="Final density in 2x2 material cells");
}
else
{
  mesh Th2 = square(2*n , 2*n , [2*x-1, 2*y-1]); // [-1,1]^2 //HOW TO CHOOSE FROM WHAT Th2 START?
  fespace Vh2(Th2, P1);
  Vh2 v2; // densità su Th2
  for(int i = 0; i < Th2.nt; i++)
    for(int j = 0; j < 3; j++)
      if      (Th2[i][j].x >= 0 & Th2[i][j].y >= 0) v2[][Vh2(i,j)] = v( Th2[i][j].x, Th2[i][j].y);
      else if (Th2[i][j].x <  0 & Th2[i][j].y >= 0) v2[][Vh2(i,j)] = v(-Th2[i][j].x, Th2[i][j].y);
      else if (Th2[i][j].x <  0 & Th2[i][j].y <  0) v2[][Vh2(i,j)] = v(-Th2[i][j].x,-Th2[i][j].y);
      else                                          v2[][Vh2(i,j)] = v( Th2[i][j].x,-Th2[i][j].y);
  plot(v2, fill = 1,  wait = 1);
  // traslo nel primo quadrante: così Th2 da [-1,1]^2 diventa la nuova "unit cell" [0,2]^2
  Vh2 u2x =1, u2y = 1;
  real [int] v2old = v2[];
  Th2 = movemesh(Th2,[x+u2x,y+u2y]);
  v2 = v2;
  v2[] = v2old;
  plot(v2, fill = 1,cmm = "v2 dopo shift",  wait = 1);
}
//Compute nu Poisson coefficient to check our results
//Solve primal problem: with v2, on Th2?
fespace Vh2(Th2, [P1, P1]);
Vh2 [u21,u22], [u210,u220], [varu21, varu22], [psi21, psi22], [err21,err22];

problem primallinearized([varu21,varu22], [psi21, psi22]) =
  int2d(Th2) (v2^q * L * (2.0*detF(u210,u220)-1.) * (dx(psi21)*F22(u210,u220) + dy(psi22)*F11(u210,u220) - dy(psi21)*F21(u210,u220) - dx(psi22)*F12(u210,u220))
                                        * (invC11(u210,u220) * gradE11(u210,u220,varu21,varu22) + invC12(u210,u220) * gradE12(u210,u220,varu21,varu22)
                                        +  invC21(u210,u220) * gradE21(u210,u220,varu21,varu22) + invC22(u210,u220) * gradE22(u210,u220,varu21,varu22))

           + v2^q * L * (detF(u210,u220)-1) * detF(u210,u220) * ( - D1111(u210,u220) * gradE11(u210,u220,psi21,psi22) * gradE11(u210,u220,varu21,varu22)
                                                       - D1112(u210,u220) * gradE12(u210,u220,psi21,psi22) * gradE11(u210,u220,varu21,varu22)
                                                       - D1121(u210,u220) * gradE21(u210,u220,psi21,psi22) * gradE11(u210,u220,varu21,varu22)
                                                       - D1122(u210,u220) * gradE22(u210,u220,psi21,psi22) * gradE11(u210,u220,varu21,varu22) + invC11(u210,u220) * grad2E11(psi21,psi22,varu21,varu22)
                                                       - D1211(u210,u220) * gradE11(u210,u220,psi21,psi22) * gradE12(u210,u220,varu21,varu22)
                                                       - D1212(u210,u220) * gradE12(u210,u220,psi21,psi22) * gradE12(u210,u220,varu21,varu22)
                                                       - D1221(u210,u220) * gradE21(u210,u220,psi21,psi22) * gradE12(u210,u220,varu21,varu22)
                                                       - D1222(u210,u220) * gradE22(u210,u220,psi21,psi22) * gradE12(u210,u220,varu21,varu22) + invC12(u210,u220) * grad2E12(psi21,psi22,varu21,varu22)
                                                       - D2111(u210,u220) * gradE11(u210,u220,psi21,psi22) * gradE21(u210,u220,varu21,varu22)
                                                       - D2112(u210,u220) * gradE12(u210,u220,psi21,psi22) * gradE21(u210,u220,varu21,varu22)
                                                       - D2121(u210,u220) * gradE21(u210,u220,psi21,psi22) * gradE21(u210,u220,varu21,varu22)
                                                       - D2122(u210,u220) * gradE22(u210,u220,psi21,psi22) * gradE21(u210,u220,varu21,varu22) + invC21(u210,u220) * grad2E21(psi21,psi22,varu21,varu22)
                                                       - D2211(u210,u220) * gradE11(u210,u220,psi21,psi22) * gradE22(u210,u220,varu21,varu22)
                                                       - D2212(u210,u220) * gradE12(u210,u220,psi21,psi22) * gradE22(u210,u220,varu21,varu22)
                                                       - D2221(u210,u220) * gradE21(u210,u220,psi21,psi22) * gradE22(u210,u220,varu21,varu22)
                                                       - D2222(u210,u220) * gradE22(u210,u220,psi21,psi22) * gradE22(u210,u220,varu21,varu22) + invC22(u210,u220) * grad2E22(psi21,psi22,varu21,varu22)
                                                   )

            + v2^q * 2.0*M* (gradE11(u210,u220,psi21,psi22) * gradE11(u210,u220,varu21,varu22) + E11(u210,u220) * grad2E11(psi21,psi22,varu21,varu22) +
                            gradE12(u210,u220,psi21,psi22) * gradE12(u210,u220,varu21,varu22) + E12(u210,u220) * grad2E12(psi21,psi22,varu21,varu22) +
                            gradE21(u210,u220,psi21,psi22) * gradE21(u210,u220,varu21,varu22) + E21(u210,u220) * grad2E21(psi21,psi22,varu21,varu22) +
                            gradE22(u210,u220,psi21,psi22) * gradE22(u210,u220,varu21,varu22) + E22(u210,u220) * grad2E22(psi21,psi22,varu21,varu22) )
           )

    + int2d(Th2) (v2^q * L*detF(u210,u220)*(detF(u210,u220)-1.) * (invC11(u210,u220) * gradE11(u210,u220,psi21,psi22)
                                                           + invC12(u210,u220) * gradE12(u210,u220,psi21,psi22)
                                                           + invC21(u210,u220) * gradE21(u210,u220,psi21,psi22)
                                                           + invC22(u210,u220) * gradE22(u210,u220,psi21,psi22))
                + v2^q * 2.0 * M * (E11(u210,u220) * gradE11(u210,u220,psi21,psi22)
                                 + E12(u210,u220) * gradE12(u210,u220,psi21,psi22)
                                 + E21(u210,u220) * gradE21(u210,u220,psi21,psi22)
                                 + E22(u210,u220) * gradE22(u210,u220,psi21,psi22)))
    + on(2,varu21=0) // Dirichlet
    + on(1,varu22=0) // symmetric BC
    + on(4,varu21=0) // symmetric BC
  ;

// Residual for Newton method
func real errorL2()
{
 err21[] = u1[];
 err21[] -= u210[];

 real erru = int2d(Th2)(err21^2 + err22^2);
 real normu = int2d(Th2)(u210^2 + u220^2);
 // return error estimate (stopping criterion)
 return sqrt(erru / (normu+1e-15));
}

// Newton initialization ?
[u210, u220] = [d1*x, 0]; //u_k old che soddisfa BC Dirichlet -> in params
[u21, u22] = [u210, u220]; // u_1
real tol = 1.e-12;
real res = 2. * tol;
int loopcount = 0;
int loopmax = 100;
real alpha = 1.0;

// Iterations
while (loopcount <= loopmax && res >= tol){
    loopcount ++;
    cout << "Newton iteration " << loopcount << endl;
    // Solve
    primallinearized;
    // Update
    u21[] += alpha * varu21[];// u_k+1 = u_k + delta_u
    // update error for the stopping criterion
    res = errorL2();
    //Update old solution
    u210[] = u21[];
}

real d2 = int1d(Th2,3)(u2);
nu12 = - d2 / d1; // estimated nu

cout << "FINAL POISSON'S RATIO = " << nu12 << endl;
cout << "*********************************************" << endl;
