// ***************************************************************************
// Print params
// ***************************************************************************
cout << endl << endl;

cout << "*********************************************" << endl;
cout << "case1_non_linear.edp - Params" << endl;
cout << "*********************************************" << endl;
cout << "Mesh size: " << n << " x " << n << endl;
cout << "nu: " << nu << endl;
cout << "lambda: " << L << endl;
cout << "mu: " << M <<  endl;
cout << "Young modulus: " << E << endl;
cout << "-----" << endl;
cout << "Given horizontal traction on R: " << d1 <<  endl;
cout << "nu target: " << nutarget <<  endl;
cout << "Power penalty law coefficient: " << q << endl;
cout << "Volume fraction: " << vf <<  endl;
cout << "-----" << endl;
cout << "Initial density: ";
if (rnd) cout << "random with seed = " << seed << endl;
else cout << "hard-coded" << endl;
cout << "-----" << endl;
cout << "IPOPT max iterations: " << IPOPTmaxiter <<  endl;
cout << "-----" << endl;
cout << "Helmholtz filtering: " << helm <<  endl;
if(helm) cout << "Helmholtz radius: " << radius <<  endl;
cout << "-----" << endl;
cout << "Heaviside filtering: " << heav <<  endl;
cout << "-----" << endl;
cout << "Mesh adaptivity: " << meshad <<  endl;
if(meshad){
  cout << "Mesh tolerance: " << tolmesh <<  endl;
  cout << "tau: " << tau <<  endl;
}
cout << "-----" << endl;
cout << "Main cycle max iterations: " << maxit << endl;

cout << endl << endl;

cout << "*********************************************" << endl;
cout << "case1_non_linear.edp - Solution" << endl;
cout << "*********************************************" << endl;
