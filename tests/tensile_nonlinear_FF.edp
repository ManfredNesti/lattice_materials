// ***************************************************************************
// Tensile non linear starting from FreeFem++ documentation
// https://doc.freefem.org/models/non-linear-elasticity.html
// ***************************************************************************
exec("rm tensile_nonlinear_FF.csv");
exec("touch tensile_nonlinear_FF.csv");

ofstream out("tensile_nonlinear_FF.csv", append);
out << "u,nu,nl" << endl;

real u = 0.05, v = -0.1;
real nlstart = 1.0, // 1: non linear, 0: linear
     nlfinal = 0.0,
     nldecr = 0.1;

for (real nl = nlstart; nl >= nlfinal; nl -= nldecr) {
  // ***************************************************************************
  // Macros
  // ***************************************************************************
  // Linear part of epsilon
  macro EL(u, v) [dx(u), (dx(v)+dy(u)), dy(v)] // is [epsilon_11, 2epsilon_12, epsilon_22]
  // macro EL(u, v) [EL11(u, v), 2*EL12(u, v), EL22(u, v)] //is [epsilon_11, 2epsilon_12, epsilon_22]
  macro EL11(u, v) (dx(u)) //
  macro EL12(u, v) (0.5*(dx(v)+dy(u))) //
  macro EL22(u, v) (dy(v)) //
  // Non linear part of epsilon
  macro ENL(u, v) [
    (dx(u)*dx(u) + dx(v)*dx(v))*0.5,
    (dx(u)*dy(u) + dx(v)*dy(v)),
    (dy(u)*dy(u) + dy(v)*dy(v))*0.5
    ] //

  macro ENL11(u, v) ((dx(u)*dx(u) + dx(v)*dx(v))*0.5) //
  macro ENL12(u, v) ((dx(u)*dy(u) + dx(v)*dy(v))*0.5) //
  macro ENL22(u, v) ((dy(u)*dy(u) + dy(v)*dy(v))*0.5) //
  macro dENL(u, v, uu, vv) [
                            (dx(u)*dx(uu) + dx(v)*dx(vv)),
                            (dx(u)*dy(uu) + dx(v)*dy(vv) + dx(uu)*dy(u) + dx(vv)*dy(v)),
                            (dy(u)*dy(uu) + dy(v)*dy(vv))
                            ] //
  // Epsilon: linear + nl * non-linear part
  macro E(u, v) (EL(u, v) + nl * ENL(u, v)) //is [E_11, 2E_12, E_22]
  macro E11(u, v) (EL11(u, v) + nl * ENL11(u, v)) //
  macro E12(u, v) (EL12(u, v) + nl * ENL12(u, v)) //
  macro E22(u, v) (EL22(u, v) + nl * ENL22(u, v)) //

  macro dE(u, v, uu, vv) (EL(uu, vv) + nl * dENL(u, v, uu, vv)) //
  macro ddE(u, v, uu, vv, uuu, vvv) (nl * dENL(uuu, vvv, uu, vv)) //

  // Energy F2: A(E, E) = E' * A * E (con derivate)
  macro F2(u, v) (E(u, v)' * A * E(u, v)) //
  macro dF2(u, v, uu, vv) (E(u, v)' * A * dE(u, v, uu, vv) * 2.) //
  macro ddF2(u, v, uu, vv, uuu, vvv) (
     (dE(u, v, uu, vv)' * A * dE(u, v, uuu, vvv)) * 2.
    + (E(u, v)' * A * ddE(u, v, uu, vv, uuu, vvv)) * 2.
    ) //

  // 1) f funzione di F2 (sceglie 0.25 * u^2 ovvero 0.25 * F2^2)
  // macro f(u) ((u)*(u)*0.25) //
  // macro df(u) ((u)*0.5) //
  // macro ddf(u) (0.5) //

  // 2) f linear: f = energy = u
  macro f(u) (u) //
  macro df(u) (1.0) //
  macro ddf(u) (0.) //

  // sigma = 2 mu E + lambda tr(E) Id
  macro trE(u, v) (E11(u, v) + E22(u, v)) //
  macro sigma11(u, v) (2 * mu * E11(u, v) + lambda * trE(u, v)) //
  macro sigma12(u, v) (2 * mu * E12(u, v)) //
  macro sigma22(u, v) (2 * mu * E22(u, v) + lambda * trE(u, v)) //

  // ***************************************************************************
  // Parameters
  // ***************************************************************************
  real vold;
  real nu = 0.3;
  real Pa = 0; // no forces
  real Ecoeff = 1.;
  real lambda = Ecoeff * nu / (1 - nu^2);
  real mu = Ecoeff / (2 * (1 + nu));
  real coef = 0.1;
  real u = 1., v = -0.1; // traction BC

  int n = 20;
  mesh  Th = square(n, n);
  fespace Xh(Th, P1);

  //for evalutaion of F2 and its derivatives
  fespace Wh(Th, P1dc);
  Wh e2, fe2, dfe2, ddfe2;

  fespace Vh(Th, [P1, P1]);
  Vh
  [uu, vv] = [0, 0], // soluzione di NonLin (du, dv) (iterazione precedente)
  [w, s], // funzioni test
  [un, vn] = [u*(x>=1), 0]; // spostamento (un, vn) (iterazione attuale)
  // update: (un, vn) =- (du, dv)

  fespace Sh(Th, P1);
  Sh u1, v1; // (useles) copy of previous iteration

  // Matrix A
  real a11 = 2 * mu + lambda;
  real a22 = mu; // because [0, 2 * t12, 0]' A [0, 2*s12, 0] = 2 * mu * (t12 * s12 + t21 * s21) = 4 * mu * t12 *  s12
  real a33 = 2 * mu + lambda;
  real a12 = 0;
  real a13 = lambda;
  real a23 = 0;
  // symmetric part
  real a21 = a12;
  real a31 = a13;
  real a32 = a23;

  func A = [[a11, a12, a13], [a21, a22, a23], [a31, a32, a33]];

  // ***************************************************************************
  // Problems
  // ***************************************************************************
  // Mass matrix for the residual
  varf vmass ([uu, vv], [w, s], solver=CG) = int2d(Th)(uu*w + vv*s);
  matrix M = vmass(Vh, Vh);
  // Non linear problem: // D^2 J(un, vn) * ((w, s), (du, dv)) = DJ(un, vn) (w, s)
  problem NonLin([uu, vv], [w, s], solver=LU)
    // D^2 J(un, vn) * ((w, s), (du, dv))
    = int2d(Th, qforder=1)((dF2(un, vn, uu, vv) * dF2(un, vn, w, s) * ddfe2
                + ddF2(un, vn, uu, vv, w, s) * dfe2) // bug correction -> doesn't work with f = u^2, it works with f = u
    )
    // - DJ(un, vn) (w, s)
    - int1d(Th, 3)(Pa * s)
    - int2d(Th, qforder = 1)(dF2(un, vn, w, s) * dfe2)
    // BCs
    + on(2, uu = 0)
    + on(1, vv = 0)
    + on(4, uu = 0)
    ;

    // ***************************************************************************
    // Newton method
    // ***************************************************************************
  for (int i = 0; i < 10; i++){
    cout << "Loop " << i << endl;

    // Update
    e2 = F2(un, vn);
    dfe2 = df(e2) ; // it goes in NonLin
    ddfe2 = ddf(e2); // it goes in NonLin
    cout << "e2 max = " <<e2[].max << ", min = " << e2[].min << endl;
    cout << "de2 max = "<< dfe2[].max << ", min = " << dfe2[].min << endl;
    cout << "dde2 max = "<< ddfe2[].max << ", min = " << ddfe2[].min << endl;

    // Solve
    NonLin;
    w[] = M * uu[];

    // Residual
    real res = sqrt(w[]' * uu[]); //L^2 norm of [uu, vv]
    cout << " L^2 residual = " << res << endl;

    // Update
    v1 = vv;
    u1 = uu;
    cout << "u1 min = " <<u1[].min << ", u1 max = " << u1[].max << endl;
    cout << "v1 min = " <<v1[].min << ", v2 max = " << v1[].max << endl;
    un[] -= uu[];

    // Plots
    // plot([uu, vv], wait = 1, cmm = "Displacement");

    if (res < 1e-5) break;
  }

  // Plots
  // plot([un, vn], wait = true, "nl = "+nl);
  // plot(un, fill = 1, dim = 3, wait = 1, cmm = "u1, nl = "+nl);
  // plot(vn, fill = 1, dim = 3, wait = 1, cmm = "u2, nl = "+nl);

  // ***************************************************************************
  // Movemesh
  // ***************************************************************************
  real minarea = checkmovemesh(Th, [x + coef * un, y + coef * vn]);
  if (minarea > 0) {// movemesh will be ok
    mesh th1 = movemesh(Th, [x + coef * un, y + coef * vn]);
    plot(Th, th1, wait = 1, cmm = "nl = "+nl);
  } else cout << "MOVEMESH ERROR: Min area = " << minarea << endl;

  // ***************************************************************************
  // Estimation of nu
  // ***************************************************************************
  real d1 = int1d(Th, 2)(un) - int1d(Th, 4)(un);
  real d2 = int1d(Th, 3)(vn) - int1d(Th, 1)(vn);;
  cout << "d1 = " << d1 << endl;
  cout << "d2 = " << d2 << endl;
  real nu12 = - d2 / d1;
  cout << "Estimated nu: " << nu12 << endl;
  out << u << "," << nu12 << "," << nl << endl;
}
