// ***************************************************************************
// Check of gradient of J
// ***************************************************************************
exec("rm check_gradJ.txt");
exec("touch check_gradJ.txt");
ofstream out("check_gradJ.txt", append);

int ii = 0;
int jj = 0;

include "../nonlinear/macros.edp";

// ***************************************************************************
// Parameters
// ***************************************************************************
real q = 4.;

real nu = 0.3;
real E = 1.;
real L = E * nu / (1 - nu^2);
real M = E / (2 * (1 + nu));

real d1 = 1.;
real nutarget = 0.3;
real nu12;
real eps = 1e-4;

int n = 30;
mesh Th = square(n, n);

fespace Xhp(Th, P1, periodic = [[2,y],[4,y],[1,x],[3,x]]);
Xhp rho, drho, xlb = 1e-4, xub = 1; // lower and upper bounds
rho = abs(5 + sin(2 * pi * x * 0.25) * sin(2 * pi * y * 0.5));
drho = abs(5 + cos(2 * pi * x * 0.25) * cos(2 * pi * y * 0.5));
Xhp rhopos = rho + eps * drho;
Xhp rhoneg = rho - eps * drho;

fespace Vh(Th, [P1, P1]);
Vh [u1,u2], [u10,u20], [psi1,psi2], [varu1,varu2], [err1,err2], [l1, l2], [phi1, phi2];

// ***************************************************************************
// Residual for Newton method
// ***************************************************************************
func real errorL2() {
 // store increments
 err1[] = u1[];
 err1[] -= u10[];

 real erru = int2d(Th)(err1^2 + err2^2);
 real normu = int2d(Th)(u10^2 + u20^2);
 // return error estimate (stopping criterion)
 return sqrt(erru / (normu + 1e-15));
}

// ***************************************************************************
// Functional J = 1/2 * (delta Target)^2
// ***************************************************************************
func real J(real[int] & v) {
  Xhp w;
  w[] = v;
  plot(w, fill = 1, value = 1, cmm = "j = "+jj+" ii = "+ii);

  out << "*********************************************" << endl;
  out << "PRIMAL PROBLEM ..." << endl;
  include "../nonlinear/cost_function/primal.edp";
  include "../nonlinear/cost_function/newton.edp";

  real d2 = int1d(Th,3)(u2);
	nu12 = - d2 / d1; // estimated nu

  out << "POISSON'S RATIO = " << nu12 << endl;
  out << "*********************************************" << endl;

	return 0.5 * (nu12 - nutarget)^2;
}

// ***************************************************************************
// Gradient of the functional (lagrangian approach)
// ***************************************************************************
func real[int] gradJ(real[int] & v) {
  Xhp w;
  w[] = v;
  J(w[]);

  real [int] dJ(Xhp.ndof);
	real Curly = (nu12 - nutarget) / d1 ;
  out << "*********************************************" << endl;
  out << "DUAL PROBLEM ..." << endl;
  include "../nonlinear/cost_function/dual.edp";
  dual;

  varf gradient(SS, psi) =
      int2d(Th) (q*w^(q-1) * psi *
                                     L*detF(u1,u2)*(detF(u1,u2)-1.) * (invC11(u1,u2) * gradE11(u1,u2,l1,l2)
          			                                                     + invC12(u1,u2) * gradE12(u1,u2,l1,l2)
          			          																					 + invC21(u1,u2) * gradE21(u1,u2,l1,l2)
          			          																					 + invC22(u1,u2) * gradE22(u1,u2,l1,l2))

       				 + q*w^(q-1) * psi *
                                2.0 * M * (E11(u1,u2) * gradE11(u1,u2,l1,l2)
        			                           + E12(u1,u2) * gradE12(u1,u2,l1,l2)
        			    				               + E21(u1,u2) * gradE21(u1,u2,l1,l2)
        			                           + E22(u1,u2) * gradE22(u1,u2,l1,l2)))
      ;

  dJ = gradient(0, Xhp);
  out << "jj = " << jj << endl;
  out << "DUAL PROBLEM: done!" << endl;
  out << "*********************************************" << endl;
  jj += 1;

  return dJ;
}

out << "--- Check gradient of J ---" << endl;
real J1 = J(rhoneg[]);
real J2 = J(rhopos[]);
real JJ = J(rho[]); // calling J -> solve primal -> find [u1,u2] corresponding to rh
out << " J1 = " << J1 << endl;
out << " J2 = " << J2 << endl;
out << " JJ = " << JJ << endl;

J2 = J2 - J1;
out << " J2 - J1 = " << J2 << endl;
J2 = (2 * eps)^(-1) * J2;
out << " (J2 - J1) / (2 * eps) = " << J2 << endl << endl;

real[int] gradientJ = gradJ(rho[]);
out << " gradJ = " << gradientJ << endl;
real dJ = gradientJ '* drho[];
out << " dJ = gradientJ '* drho = " << dJ << endl;
J1 = J2 - dJ;
out << " Difference (J2 - J1) / (2 * eps) - dJ = " << J1 << endl;
