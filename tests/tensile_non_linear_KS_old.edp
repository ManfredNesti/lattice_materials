// ***************************************************************************
// Tensile non linear with energy formula (d)
// from work of Klarbring and StrÃ¶mberg (2013)
// ***************************************************************************
int t = time();
exec("mkdir results_tensile_non_linear_e4");
exec("mkdir results_tensile_non_linear_e4/"+t);
ofstream out1("results_tensile_non_linear_e4/"+t+"/residual_newton.csv", append); //file per residui Newton
ofstream out2("results_tensile_non_linear_e4/"+t+"/tensile_non_linear_e4.csv", append); //file per nu output

include "../non_linear/macros.edp";

// Parameters
real q = 4.; //power for penalty method

real vold;
real Pa = 0; //no forces

real nu = 0.3;
real E = 1.;
real L = E*nu/(1-nu^2); //E*nu/(1+nu)/(1-2*nu); HO TENUTO QUELLO SBAGLIATO
real M = E/(2*(1+nu));

real coef = 0.1;
real d1 = 1.0;
// real  u_given = 1.,  v_given = -0.1; //traction bc

// Mesh & Fespace
mesh   Th = square(20,20);
//density space
fespace Xh(Th,P1);
fespace Xhp(Th, P1, periodic = [[2,y],[4,y],[1,x],[3,x]]);
Xhp rho;
rho = 1;
real w = 1;

//displacement space
fespace Vh(Th, [P1, P1]);
Vh [u1,u2], [u10,u20], [psi1,psi2], [varu1,varu2], [err1,err2],
   [u,v], [du,dv]; //var for check newton

//Problem: try Newton method
include "../non_linear/cost_function/primal.edp";
include "../non_linear/cost_function/newton.edp";

// Movemesh
real minarea = checkmovemesh(Th, [x+coef*u1, y+coef*u2]);
if (minarea > 0) {// movemesh will be ok
  mesh th1 = movemesh(Th, [x+coef*u1, y+coef*u2]);
  plot(th1, wait=true);
  plot(Th, th1, wait=true);
} else cout << "MOVEMESH ERROR: Min area = " << minarea << endl;


// Estimated nu
d1 = int1d(Th,2)(u1) - int1d(Th,4)(u1);
real d2 = int1d(Th,3)(u2) /*- int1d(Th,1)(u2)*/;
// cout << " tolto: " << int1d(Th,1)(u2) << endl; // viene 1e-32 effettivamente ci aspettiamo sia zero
cout << "d1 = " << d1 << endl;
cout << "d2 = " << d2 << endl;
real nu12 = - d2 / d1;
cout << "Estimated nu: " << nu12 << endl;

// Check newton
real eps = 1e-4;
[u,v] = [x, 0]; // trial u
[du,dv] = [sin(2*pi*x)*sin(2*pi*y), sin(2*pi*x)*sin(2*pi*y)];   // trial du
varf Jac ([dummy1,dummy2],[w1,w2]) = int2d(Th) (L* (2.0*detF(u,v)-1.) * (dx(w1)*F22(u,v) + dy(w2)*F11(u,v) - dy(w1)*F21(u,v) - dx(w2)*F12(u,v))
                                     * (invC11(u,v) * gradE11(u,v,du,dv) + invC12(u,v) * gradE12(u,v,du,dv)
                                      + invC21(u,v) * gradE21(u,v,du,dv) + invC22(u,v) * gradE22(u,v,du,dv))
                 + L* (detF(u,v)-1) * detF(u,v) * ( - D1111(u,v) * gradE11(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1112(u,v) * gradE12(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1121(u,v) * gradE21(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1122(u,v) * gradE22(u,v,w1,w2) * gradE11(u,v,du,dv) + invC11(u,v) * grad2E11(w1,w2,du,dv)
                                                    - D1211(u,v) * gradE11(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1212(u,v) * gradE12(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1221(u,v) * gradE21(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1222(u,v) * gradE22(u,v,w1,w2) * gradE12(u,v,du,dv) + invC12(u,v) * grad2E12(w1,w2,du,dv)
                                                    - D2111(u,v) * gradE11(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2112(u,v) * gradE12(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2121(u,v) * gradE21(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2122(u,v) * gradE22(u,v,w1,w2) * gradE21(u,v,du,dv) + invC21(u,v) * grad2E21(w1,w2,du,dv)
                                                    - D2211(u,v) * gradE11(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2212(u,v) * gradE12(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2221(u,v) * gradE21(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2222(u,v) * gradE22(u,v,w1,w2) * gradE22(u,v,du,dv) + invC22(u,v) * grad2E22(w1,w2,du,dv)
                                                  )

            + 2.0*M* (gradE11(u,v,w1,w2) * gradE11(u,v,du,dv) + E11(u,v) * grad2E11(w1,w2,du,dv) +
                      gradE12(u,v,w1,w2) * gradE12(u,v,du,dv) + E12(u,v) * grad2E12(w1,w2,du,dv) +
                      gradE21(u,v,w1,w2) * gradE21(u,v,du,dv) + E21(u,v) * grad2E21(w1,w2,du,dv) +
                      gradE22(u,v,w1,w2) * gradE22(u,v,du,dv) + E22(u,v) * grad2E22(w1,w2,du,dv) )
          );

Vh [upos,vpos] = [u + eps*du, v + eps*dv];
Vh [uneg,vneg] = [u - eps*du, v - eps*dv];

varf rhs1([dummy1,dummy2],[w1,w2]) = int2d(Th) (L*detF(uneg,vneg)*(detF(uneg,vneg)-1.) *
                                                     (invC11(uneg,vneg) * gradE11(uneg,vneg,w1,w2)
                                                    + invC12(uneg,vneg) * gradE12(uneg,vneg,w1,w2)
															                      + invC21(uneg,vneg) * gradE21(uneg,vneg,w1,w2)
											                              + invC22(uneg,vneg) * gradE22(uneg,vneg,w1,w2))
                                    + 2.0 * M * (E11(uneg,vneg) * gradE11(uneg,vneg,w1,w2)
                                               + E12(uneg,vneg) * gradE12(uneg,vneg,w1,w2)
                                               + E21(uneg,vneg) * gradE21(uneg,vneg,w1,w2)
                                               + E22(uneg,vneg) * gradE22(uneg,vneg,w1,w2))
                                               );
varf rhs2([dummy1,dummy2],[w1,w2]) = int2d(Th) (L*detF(upos,vpos)*(detF(upos,vpos)-1.) *
                                                    (invC11(upos,vpos) * gradE11(upos,vpos,w1,w2)
                                                   + invC12(upos,vpos) * gradE12(upos,vpos,w1,w2)
                                                   + invC21(upos,vpos) * gradE21(upos,vpos,w1,w2)
                                                   + invC22(upos,vpos) * gradE22(upos,vpos,w1,w2))
                                   + 2.0 * M * (E11(upos,vpos) * gradE11(upos,vpos,w1,w2)
                                              + E12(upos,vpos) * gradE12(upos,vpos,w1,w2)
                                              + E21(upos,vpos) * gradE21(upos,vpos,w1,w2)
                                              + E22(upos,vpos) * gradE22(upos,vpos,w1,w2))
                                              );

real[int] RHS1 = rhs1(0,Vh);
real[int] RHS2 = rhs2(0,Vh);
RHS2 = RHS2 - RHS1;
RHS2 = (2*eps)^(-1)*RHS2;
real[int] JAC = Jac(0,Vh);
for (int i=JAC.n-5; i<JAC.n; i++) cout << "RHS(i) = " << RHS2[i] << " " << "JAC(i) = " << JAC[i] << endl;
RHS1 = RHS2 - JAC;
cout << "||RHS - JAC||_inf = " << RHS1.linfty << endl;
