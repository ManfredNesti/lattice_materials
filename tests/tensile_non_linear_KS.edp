// ***************************************************************************
// Tensile non linear with energy formula (d)
// from work of Klarbring and Str√∂mberg (2013)
// ***************************************************************************
exec("mkdir tensile_non_linear_KS");

include "../non_linear/macros.edp";

real d1start = 1.0,
     d1final = 0.01,
     d1factor = 2.;

exec("rm tensile_non_linear_KS/linear_consistency.csv");
exec("touch tensile_non_linear_KS/linear_consistency.csv");
ofstream outlinear("tensile_non_linear_KS/linear_consistency.csv", append);
outlinear << "d1,nu" << endl;

exec("rm tensile_non_linear_KS/check_newton_jacobian.txt");
exec("touch tensile_non_linear_KS/check_newton_jacobian.txt");
ofstream outjac("tensile_non_linear_KS/check_newton_jacobian.txt", append);

for (real d1 = d1start; d1 >= d1final; d1 /= d1factor) {
  // ***************************************************************************
  // Parameters
  // ***************************************************************************
  real coef = 0.1;
  real q = 4.;
  real nu = 0.3;
  real E = 1.;
  real L = E * nu / (1 - nu^2);
  real M = E / (2 * (1 + nu));

  int n = 20;
  mesh Th = square(n, n);
  fespace Xh(Th, P1);
  real rho = 1;
  real w = 1;

  fespace Vh(Th, [P1, P1]);
  Vh [u1,u2], [u10,u20], [psi1,psi2], [varu1,varu2], [err1,err2], [u,v], [du,dv];

  include "../non_linear/cost_function/primal.edp";

  // ***************************************************************************
  // Residual for Newton method
  // ***************************************************************************
  func real errorL2()
  {
   err1[] = u1[];
   err1[] -= u10[];

   real erru = int2d(Th)(err1^2 + err2^2);
   real normu = int2d(Th)(u10^2 + u20^2);
   // return error estimate (stopping criterion)
   return sqrt(erru / (normu+1e-15));
  }

  // ***************************************************************************
  // Newton initialization
  // ***************************************************************************
  [u10, u20] = [d1*x, 0]; //u_k old che soddisfa BC Dirichlet -> in params
  [u1, u2] = [u10, u20]; // u_1
  real tol = 1.e-12;
  real res = 2. * tol;
  int loopcount = 0;
  int loopmax = 100;
  real alpha = 1.0;

  exec("rm tensile_non_linear_KS/newton_convergence.csv");
  exec("touch tensile_non_linear_KS/newton_convergence.csv");
  ofstream outconv("tensile_non_linear_KS/newton_convergence.csv", append);
  outconv << "L2_error" << endl;
  // ***************************************************************************
  // Newton loop
  // ***************************************************************************
  while (loopcount <= loopmax && res >= tol){
      loopcount ++;
      cout << "Newton iteration " << loopcount << endl;
      // Solve
      primallinearized;
      // Update
      u1[] += alpha * varu1[];// u_k+1 = u_k + delta_u
      // update error for the stopping criterion
      res = errorL2();
      outconv << res << endl;
      //Update old solution
      u10[] = u1[];
  }
  outconv << endl;

  // ***************************************************************************
  // Movemesh
  // ***************************************************************************
  real minarea = checkmovemesh(Th, [x+ coef * u1, y+coef * u2]);
  if (minarea > 0) {// movemesh will be ok
    mesh th1 = movemesh(Th, [x + coef * u1, y + coef * u2]);
    plot(Th, th1, wait = 1, cmm = "d1 = "+d1);
  } else cout << "MOVEMESH ERROR: Min area = " << minarea << endl;


  // ***************************************************************************
  // Estimation of nu
  // ***************************************************************************
  d1 = int1d(Th, 2)(u1) - int1d(Th, 4)(u1);
  real d2 = int1d(Th, 3)(u2) /*- int1d(Th,1)(u2)*/;
  // cout << " tolto: " << int1d(Th,1)(u2) << endl; // viene 1e-32 effettivamente ci aspettiamo sia zero
  cout << "d1 = " << d1 << endl;
  cout << "d2 = " << d2 << endl;
  real nu12 = - d2 / d1;
  cout << "Estimated nu: " << nu12 << endl;

  outlinear << d1 << "," << nu12 << endl;

  include "check_newton_jac.edp";
}
