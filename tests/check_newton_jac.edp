// ***************************************************************************
// Check Newton jacobian for Tensile non linear KS
// ***************************************************************************
outjac << "--- Check Newton jacobian for d1 = " << d1 << " ---" << endl;
real eps = 1e-4;
[u,v] = [x, 0]; // trial u
[du,dv] = [sin(2 * pi * x) * sin(2 * pi * y), sin(2 * pi * x) * sin(2 * pi * y)];   // trial du
varf Jac ([dummy1,dummy2],[w1,w2]) = int2d(Th) (L * (2.0 * detF(u,v) - 1.) * (dx(w1) * F22(u,v) + dy(w2) * F11(u,v) - dy(w1) * F21(u,v) - dx(w2) * F12(u,v))
                                     * (invC11(u,v) * gradE11(u,v,du,dv) + invC12(u,v) * gradE12(u,v,du,dv)
                                      + invC21(u,v) * gradE21(u,v,du,dv) + invC22(u,v) * gradE22(u,v,du,dv))
                 + L* (detF(u,v)-1) * detF(u,v) * ( - D1111(u,v) * gradE11(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1112(u,v) * gradE12(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1121(u,v) * gradE21(u,v,w1,w2) * gradE11(u,v,du,dv)
                                                    - D1122(u,v) * gradE22(u,v,w1,w2) * gradE11(u,v,du,dv) + invC11(u,v) * grad2E11(w1,w2,du,dv)
                                                    - D1211(u,v) * gradE11(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1212(u,v) * gradE12(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1221(u,v) * gradE21(u,v,w1,w2) * gradE12(u,v,du,dv)
                                                    - D1222(u,v) * gradE22(u,v,w1,w2) * gradE12(u,v,du,dv) + invC12(u,v) * grad2E12(w1,w2,du,dv)
                                                    - D2111(u,v) * gradE11(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2112(u,v) * gradE12(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2121(u,v) * gradE21(u,v,w1,w2) * gradE21(u,v,du,dv)
                                                    - D2122(u,v) * gradE22(u,v,w1,w2) * gradE21(u,v,du,dv) + invC21(u,v) * grad2E21(w1,w2,du,dv)
                                                    - D2211(u,v) * gradE11(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2212(u,v) * gradE12(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2221(u,v) * gradE21(u,v,w1,w2) * gradE22(u,v,du,dv)
                                                    - D2222(u,v) * gradE22(u,v,w1,w2) * gradE22(u,v,du,dv) + invC22(u,v) * grad2E22(w1,w2,du,dv)
                                                  )

            + 2.0*M* (gradE11(u,v,w1,w2) * gradE11(u,v,du,dv) + E11(u,v) * grad2E11(w1,w2,du,dv) +
                      gradE12(u,v,w1,w2) * gradE12(u,v,du,dv) + E12(u,v) * grad2E12(w1,w2,du,dv) +
                      gradE21(u,v,w1,w2) * gradE21(u,v,du,dv) + E21(u,v) * grad2E21(w1,w2,du,dv) +
                      gradE22(u,v,w1,w2) * gradE22(u,v,du,dv) + E22(u,v) * grad2E22(w1,w2,du,dv) )
          );

Vh [upos,vpos] = [u + eps * du, v + eps * dv];
Vh [uneg,vneg] = [u - eps * du, v - eps * dv];

varf rhs1([dummy1,dummy2],[w1,w2]) = int2d(Th) (L * detF(uneg,vneg) * (detF(uneg,vneg) - 1.) *
                                                     (invC11(uneg,vneg) * gradE11(uneg,vneg,w1,w2)
                                                    + invC12(uneg,vneg) * gradE12(uneg,vneg,w1,w2)
															                      + invC21(uneg,vneg) * gradE21(uneg,vneg,w1,w2)
											                              + invC22(uneg,vneg) * gradE22(uneg,vneg,w1,w2))
                                    + 2.0 * M * (E11(uneg,vneg) * gradE11(uneg,vneg,w1,w2)
                                               + E12(uneg,vneg) * gradE12(uneg,vneg,w1,w2)
                                               + E21(uneg,vneg) * gradE21(uneg,vneg,w1,w2)
                                               + E22(uneg,vneg) * gradE22(uneg,vneg,w1,w2))
                                               );
varf rhs2([dummy1,dummy2],[w1,w2]) = int2d(Th) (L * detF(upos,vpos) * (detF(upos,vpos) - 1.) *
                                                    (invC11(upos,vpos) * gradE11(upos,vpos,w1,w2)
                                                   + invC12(upos,vpos) * gradE12(upos,vpos,w1,w2)
                                                   + invC21(upos,vpos) * gradE21(upos,vpos,w1,w2)
                                                   + invC22(upos,vpos) * gradE22(upos,vpos,w1,w2))
                                   + 2.0 * M * (E11(upos,vpos) * gradE11(upos,vpos,w1,w2)
                                              + E12(upos,vpos) * gradE12(upos,vpos,w1,w2)
                                              + E21(upos,vpos) * gradE21(upos,vpos,w1,w2)
                                              + E22(upos,vpos) * gradE22(upos,vpos,w1,w2))
                                              );

real[int] RHS1 = rhs1(0,Vh);
real[int] RHS2 = rhs2(0,Vh);
RHS2 = RHS2 - RHS1;
RHS2 = (2 * eps)^(-1) * RHS2;
real[int] JAC = Jac(0,Vh);
for (int i=JAC.n-5; i < JAC.n; i++) outjac << "RHS(i) = " << RHS2[i] << " " << "JAC(i) = " << JAC[i] << endl;
RHS1 = RHS2 - JAC;
outjac << "||RHS - JAC||_inf = " << RHS1.linfty << endl << endl;
